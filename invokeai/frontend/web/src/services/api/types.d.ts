import { O } from 'ts-toolbelt';
import { components } from './schema';

type schemas = components['schemas'];

/**
 * Helper type to extract the invocation type from the schema.
 * Also flags the `type` property as required.
 */
type Invocation<T extends keyof schemas> = O.Required<schemas[T], 'type'>;

/**
 * Types from the API, re-exported from the types generated by `openapi-typescript`.
 */

// Images
export type ImageDTO = schemas['ImageDTO'];
export type BoardDTO = schemas['BoardDTO'];
export type BoardChanges = schemas['BoardChanges'];
export type ImageChanges = schemas['ImageRecordChanges'];
export type ImageCategory = schemas['ImageCategory'];
export type ResourceOrigin = schemas['ResourceOrigin'];
export type ImageField = schemas['ImageField'];
export type OffsetPaginatedResults_BoardDTO_ =
  schemas['OffsetPaginatedResults_BoardDTO_'];
export type OffsetPaginatedResults_ImageDTO_ =
  schemas['OffsetPaginatedResults_ImageDTO_'];

// Models
export type ModelType = schemas['ModelType'];
export type BaseModelType = schemas['BaseModelType'];
export type PipelineModelField = schemas['PipelineModelField'];
export type ModelsList = schemas['ModelsList'];

// Graphs
export type Graph = schemas['Graph'];
export type Edge = schemas['Edge'];
export type GraphExecutionState = schemas['GraphExecutionState'];

// General nodes
export type CollectInvocation = Invocation<'CollectInvocation'>;
export type IterateInvocation = Invocation<'IterateInvocation'>;
export type RangeInvocation = Invocation<'RangeInvocation'>;
export type RandomRangeInvocation = Invocation<'RandomRangeInvocation'>;
export type RangeOfSizeInvocation = Invocation<'RangeOfSizeInvocation'>;
export type InpaintInvocation = Invocation<'InpaintInvocation'>;
export type ImageResizeInvocation = Invocation<'ImageResizeInvocation'>;
export type RandomIntInvocation = Invocation<'RandomIntInvocation'>;
export type CompelInvocation = Invocation<'CompelInvocation'>;
export type DynamicPromptInvocation = Invocation<'DynamicPromptInvocation'>;
export type NoiseInvocation = Invocation<'NoiseInvocation'>;
export type TextToLatentsInvocation = Invocation<'TextToLatentsInvocation'>;
export type LatentsToLatentsInvocation =
  Invocation<'LatentsToLatentsInvocation'>;
export type ImageToLatentsInvocation = Invocation<'ImageToLatentsInvocation'>;
export type LatentsToImageInvocation = Invocation<'LatentsToImageInvocation'>;
export type PipelineModelLoaderInvocation =
  Invocation<'PipelineModelLoaderInvocation'>;

// ControlNet Nodes
export type ControlNetInvocation = Invocation<'ControlNetInvocation'>;
export type CannyImageProcessorInvocation =
  Invocation<'CannyImageProcessorInvocation'>;
export type ContentShuffleImageProcessorInvocation =
  Invocation<'ContentShuffleImageProcessorInvocation'>;
export type HedImageProcessorInvocation =
  Invocation<'HedImageProcessorInvocation'>;
export type LineartAnimeImageProcessorInvocation =
  Invocation<'LineartAnimeImageProcessorInvocation'>;
export type LineartImageProcessorInvocation =
  Invocation<'LineartImageProcessorInvocation'>;
export type MediapipeFaceProcessorInvocation =
  Invocation<'MediapipeFaceProcessorInvocation'>;
export type MidasDepthImageProcessorInvocation =
  Invocation<'MidasDepthImageProcessorInvocation'>;
export type MlsdImageProcessorInvocation =
  Invocation<'MlsdImageProcessorInvocation'>;
export type NormalbaeImageProcessorInvocation =
  Invocation<'NormalbaeImageProcessorInvocation'>;
export type OpenposeImageProcessorInvocation =
  Invocation<'OpenposeImageProcessorInvocation'>;
export type PidiImageProcessorInvocation =
  Invocation<'PidiImageProcessorInvocation'>;
export type ZoeDepthImageProcessorInvocation =
  Invocation<'ZoeDepthImageProcessorInvocation'>;

// Node Outputs
export type ImageOutput = schemas['ImageOutput'];
export type MaskOutput = schemas['MaskOutput'];
export type PromptOutput = schemas['PromptOutput'];
export type IterateInvocationOutput = schemas['IterateInvocationOutput'];
export type CollectInvocationOutput = schemas['CollectInvocationOutput'];
export type LatentsOutput = schemas['LatentsOutput'];
export type GraphInvocationOutput = schemas['GraphInvocationOutput'];
